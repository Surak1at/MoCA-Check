from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from geometry_ai import decode_and_predict
import base64
from io import BytesIO
import numpy as np
import asyncio

from PIL import Image

app = FastAPI()

# ‚úÖ CORS (‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö frontend)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # production ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏∞‡∏ö‡∏∏ domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/geometry-check/")
async def geometry_check(req: Request):
    try:
        data = await req.json()
        image_b64 = data.get("image")
        if not image_b64:
            raise HTTPException(status_code=400, detail="Missing image field")

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô run_in_executor ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô block
        loop = asyncio.get_event_loop()
        prediction, confidence, image = await loop.run_in_executor(
            None, decode_and_predict, image_b64
        )
        
        image.save("debug_input.png")  # üîç ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û
        if np.array(image).mean() > 250:
            raise HTTPException(status_code=400, detail="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î Predict")

        # ‚úÖ encode debug image (‡πÑ‡∏°‡πà save ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß)
        buffer = BytesIO()
        image.save(buffer, format="PNG")
        debug_b64 = base64.b64encode(buffer.getvalue()).decode()

        return {
            "prediction": prediction,
            "confidence": round(confidence, 4),
            "debug_base64": f"data:image/png;base64,{debug_b64}"
        }

    except HTTPException as e:
        raise e  # ‡∏™‡πà‡∏á status code ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
