import React, { useState, useEffect, useRef } from 'react';
import { Stage, Layer, Line, Circle, Text, Rect } from 'react-konva';
import { motion } from 'framer-motion';
import { Volume2 } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import useExitConfirm from '../../hooks/useExitConfirm';
import useGlobalAudioPlayer from '../../hooks/useGlobalAudioPlayer';
import html2canvas from 'html2canvas';

const generateRandomTime = () => {
  const randomHour = Math.floor(Math.random() * 12) + 1;
  const minuteSteps = Array.from({ length: 12 }, (_, i) => i * 5); // [0, 5, ..., 55]
  const randomMinute = minuteSteps[Math.floor(Math.random() * minuteSteps.length)];
  return { hour: randomHour, minute: randomMinute };
};

export default function ClockRotationTest() {
  useExitConfirm();
  const [step, setStep] = useState(1);
  const [score, setScore] = useState(0);
  const [selectedShape, setSelectedShape] = useState(null);
  const [shapeAnswer, setShapeAnswer] = useState(null);
  const [targetTime, setTargetTime] = useState(generateRandomTime());
  const [currentHour, setCurrentHour] = useState(12);
  const [currentMinute, setCurrentMinute] = useState(0);
  const [inputHour, setInputHour] = useState('');
  const [inputMinute, setInputMinute] = useState('');
  const [step1Score, setStep1Score] = useState(0);
  const [step2Score, setStep2Score] = useState(0);
  const [step3Score, setStep3Score] = useState(0);

  const navigate = useNavigate();
  const { playAudio, isPlaying } = useGlobalAudioPlayer();

  const clockRadius = 100;
  const centerX = 150;
  const centerY = 150;

  const shapeRef = useRef(null);
  const shapeHiddenRef = useRef(null);
  const hiddenStage2Ref = useRef(null);
  const hiddenStage3Ref = useRef(null);
  const step2Ref = useRef(null);
  const step3Ref = useRef(null);

  const rotateHour = () => {
    setCurrentHour((prevHour) => (prevHour % 12) + 1);
  };

  const rotateMinute = () => {
    const newMinute = (currentMinute + 5) % 60;
    setCurrentMinute(newMinute);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° fractional hour ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
    const addedFraction = newMinute === 0 ? 0 : 1 / 12; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ = 1/12 ‡∏ä‡∏°.
    setCurrentHour(prev => (prev + addedFraction) % 12);
  };

  const handleShapeAnswer = (answer) => {
    const isCorrect = selectedShape === answer;
    setStep1Score(isCorrect ? 1 : 0);
    setShapeAnswer(answer);
    // const newTime = generateRandomTime();
    // console.log('üïí Step 2 Target Time:', newTime); // ‚úÖ log ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    // setTargetTime(newTime);
    setStep(2);
  };

  const handleTextInputSubmit = () => {
    const hour = parseInt(inputHour);
    const minute = parseInt(inputMinute);
    let score = 0;
    if (hour === targetTime.hour) score += 0.5;
    if (minute === targetTime.minute) score += 0.5;
    setStep2Score(score);
    setStep(3);
  };

  const isClockTimeCorrect = (currentHour, currentMinute, targetHour, targetMinute) => {
    const normalize = (hour, minute) => {
      let hourFraction = 0;
      if (minute < 15) hourFraction = 0.25;
      else if (minute < 30) hourFraction = 0.5;
      else if (minute < 45) hourFraction = 0.75;
      else hourFraction = 1.0;
      return (hour % 12) + hourFraction;
    };

    const currentH = normalize(currentHour, currentMinute);
    const targetH = normalize(targetHour, targetMinute);

    const hourMatch = Math.abs(currentH - targetH) < 0.1; // ‚â§ 6 ‡∏≠‡∏á‡∏®‡∏≤
    const minuteMatch = currentMinute === targetMinute;

    return hourMatch && minuteMatch;
  };

  const handleNext = async () => {
    const normalizeHour = (h) => (Math.round(h) % 12 === 0 ? 12 : Math.round(h) % 12);
    const finalHour = normalizeHour(currentHour);
    const correctHour = normalizeHour(targetTime.hour);
  
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏¢‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠
    const step1Score = shapeAnswer === selectedShape ? 1 : 0;
    const step2HourScore = parseInt(inputHour) === targetTime.hour ? 0.5 : 0;
    const step2MinuteScore = parseInt(inputMinute) === targetTime.minute ? 0.5 : 0;
    const step3Score = finalHour === correctHour && currentMinute === targetTime.minute ? 1 : 0;
    const totalScore = step1Score + step2HourScore + step2MinuteScore + step3Score;
  
    // // üß™ Debug: log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    // console.log("üïí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏∏‡∏ô:");
    // console.log("‚áí ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", finalHour, currentMinute);
    // console.log("‚áí ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:", correctHour, targetTime.minute);
  
    // // üß™ Debug: log ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
    // console.log("üìò Clock Test ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:");
    // console.log("1Ô∏è‚É£ ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á:", step1Score);
    // console.log("2Ô∏è‚É£ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå:", step2HourScore + step2MinuteScore, `(‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á: ${step2HourScore}, ‡∏ô‡∏≤‡∏ó‡∏µ: ${step2MinuteScore})`);
    // console.log("3Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏Ç‡πá‡∏°:", step3Score);
    // console.log("üéØ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", totalScore);
  
    try {
      const shapeCanvas = await html2canvas(shapeHiddenRef.current);
      const shapeImage = shapeCanvas.toDataURL('image/png');
  
      const step2Image = hiddenStage2Ref.current.toDataURL({ mimeType: 'image/png' });
      const step3Image = hiddenStage3Ref.current.toDataURL({ mimeType: 'image/png' });
  
      localStorage.setItem('clockResult', JSON.stringify({
        shape: true,
        number: true,
        hand: false
      }));      
      localStorage.setItem('clockRotationScore', totalScore);
      localStorage.setItem('clock_rotation_test', JSON.stringify({
        shapeAnswer,
        step2Answer: { hour: inputHour, minute: inputMinute },
        step3Answer: { hour: finalHour, minute: currentMinute },
        targetTime,
        totalScore,
        timestamp: new Date().toISOString(),
        shapeImage,
        step2Image,
        step3Image
      }));
  
      navigate('/assessment/naming');
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', error);
    }
  };  

  useEffect(() => {
    const shapes = ['circle', 'square'];
    const randShape = shapes[Math.floor(Math.random() * shapes.length)];
    setSelectedShape(randShape);
  }, []);

  const shapeToUse = shapeAnswer || selectedShape;
  const hourAngle = (currentHour % 12) * 30 - 90;
  const minuteAngle = currentMinute * 6 - 90;
  const baseHour = targetTime.hour % 12; // ‡πÄ‡∏ä‡πà‡∏ô 6
  let hourFraction = 0;

  // ‡∏Ç‡∏¢‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏≤‡∏ó‡∏µ
  if (targetTime.minute < 15) hourFraction = 1 / 4;
  else if (targetTime.minute < 30) hourFraction = 2 / 4;
  else if (targetTime.minute < 45) hourFraction = 3 / 4;
  else hourFraction = 4 / 4;

  const targetHourAngle = ((baseHour + hourFraction) % 12) * 30 - 90;

  const targetMinuteAngle = targetTime.minute * 6 - 90;

  return (
    <motion.div className="min-h-screen flex flex-col items-center justify-center px-6 py-12 bg-gradient-to-br from-pale to-light space-y-6 w-full"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.6 }}>

      <div className="max-w-xl w-full bg-white shadow-lg rounded-xl p-6 space-y-6">
        <h2 className="text-xl sm:text-2xl font-bold text-gray-800 text-center flex items-center justify-center gap-2">
          ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
        </h2>

        {step === 1 && (
          <div className="text-center space-y-4">
            <p className="text-xl text-center font-medium">‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
              <button
                onClick={() => playAudio(`${import.meta.env.BASE_URL}audio/clock/clock_step1.mp3`)}
                disabled={isPlaying}
                className={`ml-3 p-3 rounded-full transition shadow ${isPlaying ? 'bg-gray-300 cursor-not-allowed' : 'bg-gray-200 hover:bg-gray-300'}`}
                title="‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Step 1"
              >
                <Volume2 className="w-7 h-7 text-gray-700" />
              </button>
            </p>
            {/* ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ div ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô HTMLElement ‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≠‡∏ô step 3 ‡∏î‡πâ‡∏ß‡∏¢ */}
            <div
              ref={shapeRef}
              style={{ width: '192px', height: '192px' }} // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô html2canvas ‡∏à‡∏±‡∏ö div ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
              className="shape-preview mx-auto"
            >
              {selectedShape === 'circle' ? (
                <div className="w-full h-full rounded-full bg-blue-300" />
              ) : (
                <div className="w-full h-full bg-blue-300" />
              )}
            </div>
            <div className="flex justify-center gap-4">
              <button onClick={() => handleShapeAnswer('circle')} className="px-6 py-3 bg-gray-500 text-white rounded-xl font-semibold text-lg shadow hover:bg-blue-600">‡∏ß‡∏á‡∏Å‡∏•‡∏°</button>
              <button onClick={() => handleShapeAnswer('square')} className="px-6 py-3 bg-gray-500 text-white rounded-xl font-semibold shadow hover:bg-blue-600">‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°</button>
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="space-y-4 text-center">
            <p className="text-xl text-center font-medium">
              ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
              <button
                onClick={() => playAudio(`${import.meta.env.BASE_URL}audio/clock/clock_step2.mp3`)}
                disabled={isPlaying}
                className={`ml-3 p-3 rounded-full transition shadow ${isPlaying ? 'bg-gray-300 cursor-not-allowed' : 'bg-gray-200 hover:bg-gray-300'}`}
                title="‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Step 2"
              >
                <Volume2 className="w-7 h-7 text-gray-700" />
              </button>
            </p>
            <span class="text-md text-center">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏Ñ‡πà‡πÄ‡∏•‡∏Ç 5 ‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 0 ‡πÄ‡∏ä‡πà‡∏ô 30 45 20 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô</span>
            <div className="flex justify-center step2-clock">
              <Stage width={280} height={280} ref={step2Ref}>
                <Layer>
                  {shapeToUse === 'circle' ? (
                    <>
                      <Circle x={140} y={140} radius={100} fill="#bfdbfe" />
                      {[...Array(12)].map((_, i) => {
                        const angle = (i + 1) * 30 - 90;
                        const x = 140 + Math.cos((angle * Math.PI) / 180) * 80;
                        const y = 140 + Math.sin((angle * Math.PI) / 180) * 80;
                        return (
                          <Text key={i} x={x - 6} y={y - 10} text={String(i + 1)} fontSize={16} fill="black" />
                        );
                      })}
                    </>
                  ) : (
                    <>
                      <Rect x={40} y={40} width={200} height={200} fill="#bfdbfe" />
                      {[...Array(12)].map((_, i) => {
                        const angle = (i + 1) * 30 - 90;
                        const x = 140 + Math.cos((angle * Math.PI) / 180) * 80;
                        const y = 140 + Math.sin((angle * Math.PI) / 180) * 80;
                        return (
                          <Text key={i} x={x - 6} y={y - 10} text={String(i + 1)} fontSize={16} fill="black" />
                        );
                      })}
                    </>
                  )}
                  <Line points={[140, 140, 140 + Math.cos((targetHourAngle * Math.PI) / 180) * 50, 140 + Math.sin((targetHourAngle * Math.PI) / 180) * 50]} stroke="black" strokeWidth={5} lineCap="round" />
                  <Line points={[140, 140, 140 + Math.cos((targetMinuteAngle * Math.PI) / 180) * 70, 140 + Math.sin((targetMinuteAngle * Math.PI) / 180) * 70]} stroke="black" strokeWidth={3} lineCap="round" />
                  <Circle x={140} y={140} radius={4} fill="black" />
                </Layer>
              </Stage>
            </div>
            <div className="flex justify-center gap-2">
              <input
                type="number"
                min="0" // ‚úÖ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                placeholder="‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
                value={inputHour}
                onChange={e => setInputHour(e.target.value)}
                className="border p-3 rounded w-24 text-center text-lg"
              />
              <span className="text-xl font-bold">:</span>
              <input
                type="number"
                min="0" // ‚úÖ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                placeholder="‡∏ô‡∏≤‡∏ó‡∏µ"
                value={inputMinute}
                onChange={e => setInputMinute(e.target.value)}
                className="border p-3 rounded w-24 text-center text-lg"
              />
            </div>

            <button onClick={handleTextInputSubmit} className="mt-3 px-6 py-3 bg-blue-600 text-white rounded-lg shadow hover:bg-blue-700 text-lg">‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
          </div>
        )}

        {step === 3 && (
          <>
            <p className="text-xl text-center font-medium">
              ‡∏õ‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
              <button
                onClick={() => playAudio(`${import.meta.env.BASE_URL}audio/clock/clock_step3.mp3`)}
                disabled={isPlaying}
                className={`ml-3 p-3 rounded-full transition shadow ${isPlaying ? 'bg-gray-300 cursor-not-allowed' : 'bg-gray-200 hover:bg-gray-300'}`}
                title="‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Step 3"
              >
                <Volume2 className="w-7 h-7 text-gray-700" />
              </button>
              <br /><span className="font-bold text-3xl text-blue-700">{targetTime.hour}:{targetTime.minute.toString().padStart(2, '0')}</span>
            </p>

            <div className="flex justify-center step3-clock">
              <Stage width={320} height={320} ref={step3Ref}>
                <Layer>
                  {shapeToUse === 'circle' ? (
                    <Circle x={centerX} y={centerY} radius={clockRadius} stroke="black" strokeWidth={3} />
                  ) : (
                    <Rect x={centerX - clockRadius} y={centerY - clockRadius} width={clockRadius * 2} height={clockRadius * 2} stroke="black" strokeWidth={3} />
                  )}

                  {[...Array(12)].map((_, i) => {
                    const angle = (i + 1) * 30 - 90;
                    const x = centerX + Math.cos((angle * Math.PI) / 180) * (clockRadius - 20);
                    const y = centerY + Math.sin((angle * Math.PI) / 180) * (clockRadius - 20);
                    return (
                      <Text key={i} x={x - 10} y={y - 10} text={i + 1} fontSize={18} fontStyle="bold" fill="black" />
                    );
                  })}

                  <Line points={[centerX, centerY, centerX + Math.cos((hourAngle * Math.PI) / 180) * (clockRadius * 0.5), centerY + Math.sin((hourAngle * Math.PI) / 180) * (clockRadius * 0.5)]} stroke="black" strokeWidth={6} lineCap="round" />
                  <Line points={[centerX, centerY, centerX + Math.cos((minuteAngle * Math.PI) / 180) * (clockRadius * 0.7), centerY + Math.sin((minuteAngle * Math.PI) / 180) * (clockRadius * 0.7)]} stroke="black" strokeWidth={4} lineCap="round" />
                  <Circle x={centerX} y={centerY} radius={7} fill="black" />
                </Layer>
              </Stage>
            </div>

            <div className="flex justify-center gap-4 mt-4">
              <button onClick={rotateHour} className="px-6 py-3 bg-blue-500 text-white text-lg rounded-lg shadow hover:bg-blue-600">‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</button>
              <button onClick={rotateMinute} className="px-6 py-3 bg-purple-500 text-white text-lg rounded-lg shadow hover:bg-purple-600">‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏ó‡∏µ</button>
            </div>

            <div className="flex justify-center mt-6">
              <button onClick={handleNext} className="px-6 py-3 bg-green-600 text-white text-lg rounded-lg shadow hover:bg-green-700">‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
            </div>
          </>
        )}
      </div>
      {/* ‡∏ï‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á return (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á render ‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ) */}
      <div style={{ position: 'absolute', top: '-9999px', left: '-9999px' }}>
        {/* Shape hidden preview */}
        <div ref={shapeHiddenRef} style={{ width: 192, height: 192 }}>
          {selectedShape === 'circle' ? (
            <div className="w-full h-full rounded-full bg-blue-300" />
          ) : (
            <div className="w-full h-full bg-blue-300" />
          )}
        </div>

        {/* Step 2 - target clock preview */}
        <Stage width={280} height={280} ref={hiddenStage2Ref}>
          <Layer>
            {shapeToUse === 'circle' ? (
              <Circle x={140} y={140} radius={100} fill="#bfdbfe" />
            ) : (
              <Rect x={40} y={40} width={200} height={200} fill="#bfdbfe" />
            )}
            {/* ‚è∞ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç */}
            {[...Array(12)].map((_, i) => {
              const angle = (i + 1) * 30 - 90;
              const x = 140 + Math.cos((angle * Math.PI) / 180) * 80;
              const y = 140 + Math.sin((angle * Math.PI) / 180) * 80;
              return <Text key={i} x={x - 6} y={y - 10} text={String(i + 1)} fontSize={16} fill="black" />;
            })}
            {/* ‚è∞ ‡πÄ‡∏Ç‡πá‡∏° */}
            <Line points={[140, 140, 140 + Math.cos((targetHourAngle * Math.PI) / 180) * 50, 140 + Math.sin((targetHourAngle * Math.PI) / 180) * 50]} stroke="black" strokeWidth={5} />
            <Line points={[140, 140, 140 + Math.cos((targetMinuteAngle * Math.PI) / 180) * 70, 140 + Math.sin((targetMinuteAngle * Math.PI) / 180) * 70]} stroke="black" strokeWidth={3} />
            <Circle x={140} y={140} radius={4} fill="black" />
          </Layer>
        </Stage>

        {/* Step 3 - user adjusted clock preview */}
        <Stage width={320} height={320} ref={hiddenStage3Ref}>
          <Layer>
            {shapeToUse === 'circle' ? (
              <Circle x={centerX} y={centerY} radius={clockRadius} stroke="black" strokeWidth={3} />
            ) : (
              <Rect x={centerX - clockRadius} y={centerY - clockRadius} width={clockRadius * 2} height={clockRadius * 2} stroke="black" strokeWidth={3} />
            )}
            {[...Array(12)].map((_, i) => {
              const angle = (i + 1) * 30 - 90;
              const x = centerX + Math.cos((angle * Math.PI) / 180) * (clockRadius - 20);
              const y = centerY + Math.sin((angle * Math.PI) / 180) * (clockRadius - 20);
              return <Text key={i} x={x - 10} y={y - 10} text={i + 1} fontSize={18} fill="black" />;
            })}
            <Line points={[centerX, centerY, centerX + Math.cos((hourAngle * Math.PI) / 180) * (clockRadius * 0.5), centerY + Math.sin((hourAngle * Math.PI) / 180) * (clockRadius * 0.5)]} stroke="black" strokeWidth={6} />
            <Line points={[centerX, centerY, centerX + Math.cos((minuteAngle * Math.PI) / 180) * (clockRadius * 0.7), centerY + Math.sin((minuteAngle * Math.PI) / 180) * (clockRadius * 0.7)]} stroke="black" strokeWidth={4} />
            <Circle x={centerX} y={centerY} radius={7} fill="black" />
          </Layer>
        </Stage>
      </div>
    </motion.div>
  );
}
