import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Volume2 } from "lucide-react";
import { motion } from "framer-motion";
import useExitConfirm from "../../hooks/useExitConfirm";
import useGlobalAudioPlayer from '../../hooks/useGlobalAudioPlayer';
import Swal from '../../utils/SwalTheme';

export default function DelayedRecallTest() {
  useExitConfirm();
  const navigate = useNavigate();
  const [selectedSet, setSelectedSet] = useState([]);
  const [shuffledWords, setShuffledWords] = useState([]);
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [attempts, setAttempts] = useState(0);
  const [score, setScore] = useState(0);
  const [misScore, setMisScore] = useState(0);
  const [lockedWords, setLockedWords] = useState([]);
  const [hint, setHint] = useState("");
  const { playAudio, isPlaying } = useGlobalAudioPlayer();

  useEffect(() => {
    const storedSet = JSON.parse(localStorage.getItem("memorySelectedSet")) || [];
    if (storedSet.length === 0) {
      navigate("/assessment/memory-test");
    } else {
      setSelectedSet(storedSet);
      setShuffledWords([...storedSet].sort(() => Math.random() - 0.5));
    }
  }, [navigate]);

  const handleSelectWord = (word) => {
    if (lockedWords.includes(word)) return;
  
    const correctWord = selectedSet[currentWordIndex];
  
    if (word === correctWord) {
      // тЬЕ р╕Хр╕нр╕Ър╕Цр╕╣р╕Б
      const newLocked = [...lockedWords, word];
      const nextIndex = currentWordIndex + 1;
  
      // тЬЕ р╕Др╕│р╕Щр╕зр╕Ур╕Др╕░р╣Бр╕Щр╕Щ MIS + Recall
      const misPoints = attempts === 0 ? 3 : attempts === 1 ? 2 : 1;
      const newScore = attempts === 0 ? score + 1 : score; // р╣Др╕Фр╣Й 1 р╕Др╕░р╣Бр╕Щр╕Щр╣Ар╕Йр╕Юр╕▓р╕░р╕Бр╕гр╕Ур╕╡р╣Др╕бр╣Ир╣Гр╕Кр╣Йр╕Хр╕▒р╕зр╕Кр╣Ир╕зр╕в
      const newMisScore = misScore + misPoints;
  
      // тЬЕ р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕кр╕Цр╕▓р╕Щр╕░
      setLockedWords(newLocked);
      setCurrentWordIndex(nextIndex);
      setAttempts(0);
      setHint("");
      setScore(newScore);
      setMisScore(newMisScore);
  
      // тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Ьр╕ер╣Ар╕бр╕╖р╣Ир╕нр╕Чр╕│р╕Др╕гр╕Ъ
      if (nextIndex === selectedSet.length) {
        const result = {
          correctWords: selectedSet,
          recallScore: newScore,       // р╣Др╕Фр╣Йр╣Вр╕Фр╕вр╣Др╕бр╣Ир╣Гр╕Кр╣Йр╕Хр╕▒р╕зр╕Кр╣Ир╕зр╕в
          misScore: newMisScore,       // р╕гр╕зр╕бр╕Др╕░р╣Бр╕Щр╕Щ MIS
          timestamp: new Date().toISOString()
        };
  
        localStorage.setItem("delayedRecallResult", JSON.stringify(result));     // ЁЯФН raw result
        localStorage.setItem("delayedRecallScore", newScore);                    // тЬЕ р╕кр╕│р╕лр╕гр╕▒р╕Ъ ResultPage
        localStorage.setItem("delayedRecallMIS", newMisScore);                   // тЬЕ MIS р╣Бр╕вр╕Бр╣Др╕зр╣Йр╕Цр╣Йр╕▓р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г
        navigate("/assessment/sentence-ordering");
      }
    } else {
      // тЭМ р╕Хр╕нр╕Ър╕Ьр╕┤р╕Ф тЖТ р╣Гр╕лр╣Йр╕Хр╕▒р╕зр╕Кр╣Ир╕зр╕в
      const newAttempts = attempts + 1;
      setAttempts(newAttempts);
  
      if (newAttempts === 1) {
        const hintText = "ЁЯТб р╕Др╕│р╣Гр╕Ър╣Й: " + getCategoryHint(correctWord);
        setHint(hintText);
        Swal.fire({ title: 'р╕Др╕│р╣Гр╕Ър╣Й', text: hintText, icon: 'info' });
      } else if (newAttempts === 2) {
        const hintText = "ЁЯУМ р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З: " + getMultipleChoiceHint(correctWord);
        setHint(hintText);
        Swal.fire({ title: 'р╕Др╕│р╣Гр╕Ър╣Йр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б', text: hintText, icon: 'info' });
      } else {
        // const hintText = "тЬЕ р╕Др╕│р╕Хр╕нр╕Ър╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З: " + correctWord;
        // setHint(hintText);
        // Swal.fire({ title: 'р╣Ар╕Йр╕ер╕в', text: hintText, icon: 'success' });
        setLockedWords([...lockedWords, correctWord]);
        setCurrentWordIndex(currentWordIndex + 1);
        setAttempts(0);
      }      
    }
  };
  

  const getCategoryHint = (word) => {
    const categories = {
      "р╕лр╕Щр╣Йр╕▓": "р╕гр╣Ир╕▓р╕Зр╕Бр╕▓р╕в",
      "р╕Ьр╣Йр╕▓р╣Др╕лр╕б": "р╕кр╕┤р╣Ир╕Зр╕Вр╕нр╕З/р╣Ар╕кр╕╖р╣Йр╕нр╕Ьр╣Йр╕▓",
      "р╕зр╕▒р╕Ф": "р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣И",
      "р╕бр╕░р╕ер╕┤": "р╕Фр╕нр╕Бр╣Др╕бр╣Й",
      "р╕кр╕╡р╣Бр╕Фр╕З": "р╕кр╕╡",
      "р╕Ър╣Йр╕▓р╕Щ": "р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣И",
      "р╕Хр╕▓": "р╕гр╣Ир╕▓р╕Зр╕Бр╕▓р╕в",
      "р╣Ар╕кр╕╖р╕н": "р╕кр╕▒р╕Хр╕зр╣М",
      "р╕зр╕┤р╕Чр╕вр╕╕": "р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╣Гр╕Кр╣Йр╣Др╕Яр╕Яр╣Йр╕▓",
      "р╕кр╕╡р╣Ар╕лр╕ер╕╖р╕нр╕З": "р╕кр╕╡",
      "р╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н": "р╕кр╕┤р╣Ир╕Зр╕Вр╕нр╕З",
      "р╕Чр╕╡р╕зр╕╡": "р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╣Гр╕Кр╣Йр╣Др╕Яр╕Яр╣Йр╕▓"
    };
    return categories[word] || "р╣Др╕бр╣Ир╕Чр╕гр╕▓р╕Ър╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И";
  };

  const getMultipleChoiceHint = (word) => {
    const choices = {
      "р╕лр╕Щр╣Йр╕▓": ["р╕Хр╕▓", "р╕Ыр╕▓р╕Б", "р╕Ир╕бр╕╣р╕Б", "р╕лр╕╣", "р╕Др╕┤р╣Йр╕з"],
      "р╕Ьр╣Йр╕▓р╣Др╕лр╕б": ["р╣Ар╕кр╕╖р╣Йр╕н", "р╕Бр╕▓р╕Зр╣Ар╕Бр╕З", "р╕Бр╕гр╕░р╣Вр╕Ыр╕гр╕З", "р╕лр╕бр╕зр╕Б", "р╕Ьр╣Йр╕▓р╣Др╕лр╕б"],
      "р╕зр╕▒р╕Ф": ["р╣Вр╕Ър╕кр╕Цр╣М", "р╣Вр╕гр╕Зр╣Ар╕гр╕╡р╕вр╕Щ", "р╕Юр╕┤р╕Юр╕┤р╕Шр╕ар╕▒р╕Ур╕Ср╣М", "р╕лр╕нр╕Ыр╕гр╕░р╕Кр╕╕р╕б", "р╕зр╕▒р╕Ф"],
      "р╕бр╕░р╕ер╕┤": ["р╕Бр╕╕р╕лр╕ер╕▓р╕Ъ", "р╕Бр╕ер╣Йр╕зр╕вр╣Др╕бр╣Й", "р╕Чр╕┤р╕зр╕ер╕┤р╕Ы", "р╕Ър╕▒р╕з", "р╕бр╕░р╕ер╕┤"],
      "р╕кр╕╡р╣Бр╕Фр╕З": ["р╕кр╕╡р╣Ар╕лр╕ер╕╖р╕нр╕З", "р╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕з", "р╕кр╕╡р╕Фр╕│", "р╕кр╕╡р╕Яр╣Йр╕▓", "р╕кр╕╡р╣Бр╕Фр╕З"],
      "р╕Ър╣Йр╕▓р╕Щ": ["р╕Ър╣Йр╕▓р╕Щ", "р╕Др╕нр╕Щр╣Вр╕Ф", "р╕лр╕нр╕Юр╕▒р╕Б", "р╣Бр╕Яр╕ер╕Х", "р╕Бр╕гр╕░р╕Чр╣Ир╕нр╕б"],
      "р╕Хр╕▓": ["р╕Хр╕▓", "р╕Ир╕бр╕╣р╕Б", "р╕лр╕╣", "р╕Ыр╕▓р╕Б", "р╕Др╕┤р╣Йр╕з"],
      "р╣Ар╕кр╕╖р╕н": ["р╣Ар╕кр╕╖р╕н", "р╕кр╕┤р╕Зр╣Вр╕Х", "р╣Ар╕кр╕╖р╕нр╕Фр╕▓р╕з", "р╣Ар╕кр╕╖р╕нр╕Кр╕╡р╕Хр╣Йр╕▓", "р╣Ар╕кр╕╖р╕нр╕Вр╕▓р╕з"],
      "р╕зр╕┤р╕Чр╕вр╕╕": ["р╕зр╕┤р╕Чр╕вр╕╕", "р╕Чр╕╡р╕зр╕╡", "р╣Вр╕Чр╕гр╕ир╕▒р╕Юр╕Чр╣М", "р╕ер╕│р╣Вр╕Юр╕З", "р╕Щр╕▓р╕мр╕┤р╕Бр╕▓"],
      "р╕кр╕╡р╣Ар╕лр╕ер╕╖р╕нр╕З": ["р╕кр╕╡р╣Бр╕Фр╕З", "р╕кр╕╡р╕Яр╣Йр╕▓", "р╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕з", "р╕кр╕╡р╕Вр╕▓р╕з", "р╕кр╕╡р╣Ар╕лр╕ер╕╖р╕нр╕З"],
      "р╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н": ["р╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н", "р╕кр╕бр╕╕р╕Ф", "р╕Фр╕┤р╕Щр╕кр╕н", "р╕Ыр╕▓р╕Бр╕Бр╕▓", "р╕Бр╕гр╕░р╕Фр╕▓р╕й"],
      "р╕Чр╕╡р╕зр╕╡": ["р╕Чр╕╡р╕зр╕╡", "р╕зр╕┤р╕Чр╕вр╕╕", "р╕гр╕╡р╣Вр╕бр╕Ч", "р╕ер╕│р╣Вр╕Юр╕З", "р╣Вр╕Ыр╕гр╣Ар╕Ир╕Др╣Ар╕Хр╕нр╕гр╣М"]
    };
    return choices[word]?.join(", ") || "р╣Др╕бр╣Ир╕бр╕╡р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Б";
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-pale to-light p-4 space-y-6 w-full">
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="text-center space-y-4 w-full max-w-6xl">
        <h2 className="text-2xl sm:text-3xl font-bold text-gray-800 flex items-center justify-center gap-2">
          р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕Чр╕Ър╕Чр╕зр╕Щр╕Др╕│р╕ир╕▒р╕Юр╕Чр╣М
          <button
            onClick={() => playAudio(`${import.meta.env.BASE_URL}audio/delayedRecallInstruction.mp3`)}
            disabled={isPlaying} // тЬЕ р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щр╕Бр╕▓р╕гр╕Бр╕Фр╕гр╕░р╕лр╕зр╣Ир╕▓р╕Зр╣Ар╕кр╕╡р╕вр╕Зр╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕ер╣Ир╕Щ
            className={`p-3 rounded-full transition shadow ${isPlaying ? 'bg-gray-300 cursor-not-allowed' : 'bg-gray-200 hover:bg-gray-300'}`}
            title="р╕Яр╕▒р╕Зр╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕в"
          >
            <Volume2 className="w-7 h-7 text-gray-700" />
          </button>
        </h2>
        <p className="text-xl text-center font-medium">р╣Гр╕лр╣Йр╕Чр╕зр╕Щр╕Др╕│р╕ир╕▒р╕Юр╕Чр╣Мр╕Чр╕╡р╣Ир╕Ир╕│р╣Др╕зр╣Йр╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓р╕Щр╕╡р╣Й р╣Бр╕ер╕░р╣Ар╕гр╕╡р╕вр╕Зр╕Др╕│р╣Гр╕лр╣Йр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З</p>

        <div className="flex flex-col lg:flex-row flex-wrap lg:flex-nowrap justify-center items-center gap-4 mt-4 w-full">
          {shuffledWords.map((word, index) => (
            <button
              key={index}
              onClick={() => handleSelectWord(word)}
              className={`px-6 py-3 rounded-xl font-semibold min-w-[110px] whitespace-nowrap rounded-xl shadow text-base lg:text-lg font-semibold transition
        ${lockedWords.includes(word)
                  ? "bg-gray-500 text-white cursor-not-allowed"
                  : "bg-white text-gray-900 hover:bg-blue-400"
                }`}
              disabled={lockedWords.includes(word)}
            >
              {word}
            </button>
          ))}
        </div>
      </motion.div>
    </div>
  );
}
